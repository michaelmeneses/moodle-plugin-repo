name: Build Satis with Fix Checksums

on:
  workflow_dispatch:

jobs:
  build-fix:
    name: Build with --fix-checksums and Deploy Satis
    runs-on: ubuntu-latest

    container:
      image: middagtec/image-bitbucket-ci:v5-php82
      options: --user root

    env:
      COMPOSER_ALLOW_SUPERUSER: 1
      PROCESS_TIMEOUT: 1800
      COMPOSER_PROCESS_TIMEOUT: 1800
      COMPOSER_MEMORY_LIMIT: -1

      # Envs for Satis MIDDAG
      SATIS_NAME: ${{ vars.SATIS_NAME }}
      SATIS_URL: ${{ vars.SATIS_URL }}

      # Envs for S3 Satis (Cloudflare R2)
      S3_BUCKET: ${{ vars.S3_BUCKET }}
      S3_ACCESS_KEY_ID: ${{ vars.S3_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
      S3_REGION: ${{ vars.S3_REGION }}
      S3_ENDPOINT: ${{ vars.S3_ENDPOINT }}
      S3_USE_PATH_STYLE_ENDPOINT: ${{ vars.S3_USE_PATH_STYLE_ENDPOINT }}

    steps:
      - name: Checkout source-code
        uses: actions/checkout@v4

      - name: Restore Composer cache
        uses: actions/cache@v4
        with:
          path: /root/.cache/composer
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Restore VCS mirrors cache
        uses: actions/cache@v4
        with:
          path: /root/.cache/composer/vcs
          key: satis-vcs-${{ runner.os }}
          restore-keys: |
            satis-vcs-${{ runner.os }}

      - name: Restore S3-Satis cache
        uses: actions/cache@v4
        with:
          path: /tmp/s3-satis-generator
          key: s3-satis-${{ runner.os }}
          restore-keys: |
            s3-satis-${{ runner.os }}

      - name: Sync local checksums cache to S3
        run: |
          set -e
          if [ -d "/tmp/s3-satis-generator/.checksums" ]; then
            echo ">> Syncing local checksums cache to S3"

            # Configure AWS CLI
            export AWS_ACCESS_KEY_ID="${S3_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${S3_SECRET_ACCESS_KEY}"
            export AWS_DEFAULT_REGION="${S3_REGION}"

            # Configure path-style access for R2
            if [ "${S3_USE_PATH_STYLE_ENDPOINT}" = "true" ]; then
              export AWS_S3_USE_PATH_STYLE_ENDPOINT=true
            fi

            if ! command -v aws &> /dev/null; then
              echo ">> AWS CLI not found. Installing AWS CLI v2..."
              cd /tmp
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              ./aws/install
              rm -rf awscliv2.zip aws
            else
              echo ">> AWS CLI already installed"
            fi
            aws --version

            # Sync checksums to S3
            aws s3 sync /tmp/s3-satis-generator/.checksums "s3://${S3_BUCKET}/.checksums" \
              --endpoint-url="${S3_ENDPOINT}" \
              --delete

            echo ">> Checksums cache synchronized successfully"
          else
            echo ">> No local checksums cache found at /tmp/s3-satis-generator/.checksums"
          fi

      - name: Generate missing checksums with script
        run: |
          set -e
          echo "Running s3-generate-checksums.sh to verify and fix any missing checksums"
          chmod +x scripts/s3-generate-checksums.sh
          composer run checksums:s3

      - name: Show cache state summary
        run: |
          echo "Cache states:"
          du -sh /root/.cache/composer || true
          du -sh /tmp/s3-satis-generator || true
          if [ -d "/tmp/s3-satis-generator/.checksums" ]; then
            echo "Checksums cache:"
            du -sh /tmp/s3-satis-generator/.checksums || true
          fi
